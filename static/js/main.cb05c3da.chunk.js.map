{"version":3,"sources":["components/Root/index.js","App.js","index.js"],"names":["Root","useState","type","setType","items","setItems","total","setTotal","item","setItem","decimals","setDecimals","results","setResults","useEffect","tmp","forEach","el","Number","qnt","newResults","index","length","result","i","toFixed","push","name","byPackage","Grid","container","justify","style","marginTop","sm","Typography","variant","color","TextField","margin","marginLeft","select","label","value","onChange","e","target","MenuItem","maxWidth","List","map","ListItem","key","ListItemText","primary","secondary","ListItemSecondaryAction","Button","onClick","filter","Paper","padding","paddingLeft","marginBottom","theme","createMuiTheme","typography","fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","palette","App","props","Container","CssBaseline","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb05c3da.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Grid, Typography, TextField, MenuItem, Paper, Button, List, ListItem, ListItemText, ListItemSecondaryAction } from '@material-ui/core'\r\n\r\nexport default function Root() {\r\n  const [type, setType] = useState('kg')\r\n  const [items, setItems] = useState([])\r\n  const [total, setTotal] = useState(0)\r\n  const [item, setItem] = useState({})\r\n  const [decimals, setDecimals] = useState(2)\r\n  const [results, setResults] = useState([{}])\r\n\r\n  useEffect(() => {\r\n    if (type === 'kg') {\r\n      let tmp = 0\r\n      items.forEach((el) => {\r\n        tmp += Number(el.qnt)\r\n      })\r\n      setTotal(tmp)\r\n    }\r\n  }, [items, type])\r\n\r\n  useEffect(() => {\r\n    const newResults = [...results]\r\n    for (let index = 0; index < newResults.length; index++) {\r\n      if (newResults[index].result && newResults[index].result.length > 0) {\r\n        newResults[index].result = []\r\n        for (let i = 0; i < items.length; i++) {\r\n          const result = ((items[i].qnt / total) * newResults[index].qnt).toFixed(decimals);\r\n          newResults[index].result.push(`${result} ${type} de ${items[i].name}${type === 'kg' && items[i].byPackage ? ` em ${result/Number(items[i].byPackage)} pacotes de ${items[i].byPackage}kg` : ''}`)\r\n        }\r\n      }\r\n    }\r\n    setResults(newResults)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [items, total, decimals])\r\n\r\n  return (\r\n    <Grid container justify=\"center\" style={{ marginTop: '20px' }}>\r\n      <Grid item sm={6}>\r\n        <Typography variant=\"h5\" color=\"primary\">\r\n          Moradia UFF - Distribuição de alimentos ;)\r\n        </Typography>\r\n        <Typography color=\"primary\">Seja bem vindo!</Typography>\r\n        <br />\r\n        <Typography>Qual o tipo de divisão de alimentos deseja fazer?</Typography>\r\n        <br />\r\n        <TextField\r\n          variant=\"outlined\"\r\n          style={{ margin: '8px', marginLeft: '0px' }}\r\n          select\r\n          label=\"Tipo de operação\"\r\n          value={type}\r\n          onChange={(e) => {\r\n            setType(e.target.value)\r\n            if (e.target.value === 'itens') {\r\n              setTotal(0)\r\n            }\r\n            setItems([])\r\n            setItem({})\r\n            setResults([{}])\r\n          }}\r\n        >\r\n          <MenuItem value=\"kg\">Divisão por Kg</MenuItem>\r\n          <MenuItem value=\"itens\">Divisão por itens</MenuItem>\r\n        </TextField>\r\n        <TextField\r\n          variant=\"outlined\"\r\n          label=\"Precisão\"\r\n          style={{ margin: '8px', maxWidth: '70px' }}\r\n          type=\"Number\"\r\n          value={decimals}\r\n          onChange={(e) => {\r\n            let tmp = Number(e.target.value)\r\n            if (tmp < 0) {\r\n              tmp = 0\r\n            }\r\n            if (tmp > 6) {\r\n              tmp = 6\r\n            }\r\n            setDecimals(tmp)\r\n          }}\r\n        />\r\n        <br />\r\n        <br />\r\n        {items.length > 0 ? (\r\n          <div>\r\n            <List>\r\n              {items.map((el, index) => (\r\n                <ListItem key={index}>\r\n                  <ListItemText primary={el.name} secondary={`${el.qnt} ${type} ${el.byPackage && type === 'kg' ? `- ${el.byPackage}kg por pacote`: ''}`} />{' '}\r\n                  <ListItemSecondaryAction>\r\n                    <Button variant=\"outlined\" onClick={() => setItems(items.filter((el, i) => i !== index))}>\r\n                      Remover\r\n                    </Button>\r\n                  </ListItemSecondaryAction>\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </div>\r\n        ) : null}\r\n        <Typography>Certo, agora adicione os itens que deseja dividir e suas respectivas quantidades:</Typography>\r\n        <br />\r\n        <Paper variant=\"outlined\" style={{ padding: '20px', paddingLeft: '0px' }}>\r\n          <TextField variant=\"outlined\" label=\"Nome do item\" type=\"text\" style={{ margin: '8px' }} value={item.name || ''} onChange={(e) => setItem({ ...item, name: e.target.value })} />\r\n          <TextField variant=\"outlined\" label={'Quantidade em ' + type} type=\"number\" style={{ margin: '8px' }} value={item.qnt || ''} onChange={(e) => setItem({ ...item, qnt: e.target.value })} />\r\n          {type === 'kg' ? <TextField variant=\"outlined\" label={'kg de cada pacote'} type=\"number\" style={{ margin: '8px' }} value={item.byPackage || ''} onChange={(e) => setItem({ ...item, byPackage: e.target.value })} /> : null}\r\n          <br />\r\n          <Grid container justify=\"flex-end\">\r\n            <Button\r\n              variant=\"outlined\"\r\n              onClick={() => {\r\n                setItems([...items, item])\r\n                setItem({})\r\n              }}\r\n            >\r\n              Adicionar item\r\n            </Button>\r\n          </Grid>\r\n        </Paper>\r\n        <br />\r\n        {type === 'itens' ? (\r\n          <div>\r\n            <Typography>Para fazer as contas, preciso saber tambem quantas pessoas moram atualmente na moradia(total). Quantas são?</Typography>\r\n            <br />\r\n            <TextField variant=\"outlined\" label=\"Quantidade de moradores\" type=\"Number\" value={total} onChange={(e) => setTotal(Number(e.target.value))} />\r\n            <br />\r\n            <br />\r\n            <Typography>Agora, irei perguntar quantas pessoas moram em cada ala e informarei quantos {type} de cada devem ser enviados :)</Typography>\r\n          </div>\r\n        ) : (\r\n          <Typography>\r\n            Agora, irei perguntar quantos {type} irão para cada ala e informarei quantos {type} de cada item devem ser enviados :)\r\n          </Typography>\r\n        )}\r\n\r\n        <br />\r\n        {results.map((el, index) => (\r\n          <Paper key={index} variant=\"outlined\" style={{ padding: '20px', paddingLeft: '0px', marginBottom: '10px' }}>\r\n            <Typography style={{ margin: '8px' }}>\r\n              <b>Ala {index + 1}:</b>\r\n            </Typography>\r\n\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label={type === 'itens' ? 'Quantidade de pessoas' : 'Quantidade em kg'}\r\n              type=\"Number\"\r\n              style={{ margin: '8px' }}\r\n              value={results[index].qnt || ''}\r\n              onChange={(e) => {\r\n                const newResults = [...results]\r\n                newResults[index].qnt = Number(e.target.value)\r\n                newResults[index].result = []\r\n                for (let i = 0; i < items.length; i++) {\r\n                  const result = ((items[i].qnt / total) * newResults[index].qnt).toFixed(decimals);\r\n                  newResults[index].result.push(`${result} ${type} de ${items[i].name}${type === 'kg' && items[i].byPackage ? ` em ${result/Number(items[i].byPackage)} pacotes de ${items[i].byPackage}kg` : ''}`)\r\n                }\r\n                setResults(newResults)\r\n              }}\r\n            />\r\n            <br />\r\n            {results[index].result ? (\r\n              <div>\r\n                <Typography style={{ margin: '8px' }}>\r\n                  <b>Esta ala deve receber:</b>\r\n                </Typography>\r\n                <br />\r\n                <ul>\r\n                  {results[index].result.map((el, index) => (\r\n                    <li key={index}> {el} </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            ) : null}\r\n          </Paper>\r\n        ))}\r\n        <br />\r\n        <Button variant=\"outlined\" onClick={() => setResults([...results, {}])} style={{ marginBottom: '10px' }}>\r\n          Adicionar ala\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'\r\nimport Root from './components/Root'\r\nimport { Container, CssBaseline } from '@material-ui/core'\r\n\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n    fontSize: 14,\r\n    fontWeightLight: 300,\r\n    fontWeightRegular: 400,\r\n    fontWeightMedium: 500,\r\n  },\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n})\r\n\r\nexport default function App(props) {\r\n  return (\r\n    <MuiThemeProvider theme={theme}>\r\n      <Container maxWidth={'xl'}>\r\n        <CssBaseline />\r\n        <Root />\r\n      </Container>\r\n    </MuiThemeProvider>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}