{"version":3,"sources":["components/Root/index.js","App.js","index.js"],"names":["Root","useState","type","setType","items","setItems","total","setTotal","item","setItem","results","setResults","useEffect","tmp","forEach","el","Number","qnt","console","log","newResults","index","length","result","i","name","Grid","container","justify","style","marginTop","sm","Typography","variant","color","TextField","select","label","value","onChange","e","target","MenuItem","List","map","ListItem","key","ListItemText","primary","secondary","ListItemSecondaryAction","Button","onClick","filter","Paper","padding","paddingLeft","margin","marginBottom","theme","createMuiTheme","typography","fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","palette","App","props","Container","maxWidth","CssBaseline","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4990e2e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Grid, Typography, TextField, MenuItem, Paper, Button, List, ListItem, ListItemText, ListItemSecondaryAction } from '@material-ui/core'\r\n\r\nexport default function Root() {\r\n  const [type, setType] = useState('kg')\r\n  const [items, setItems] = useState([])\r\n  const [total, setTotal] = useState(0)\r\n  const [item, setItem] = useState({})\r\n  const [results, setResults] = useState([{}])\r\n\r\n  useEffect(() => {\r\n    if (type === 'kg') {\r\n      let tmp = 0\r\n      items.forEach((el) => {\r\n        tmp += Number(el.qnt)\r\n      })\r\n      console.log(tmp)\r\n      setTotal(tmp)\r\n    }\r\n  }, [items, type])\r\n\r\n  useEffect(() => {\r\n    const newResults = [...results]\r\n    for (let index = 0; index < newResults.length; index++) {\r\n      if (newResults[index].result) {\r\n        newResults[index].result = ''\r\n        for (let i = 0; i < items.length; i++) {\r\n          newResults[index].result += `${(items[i].qnt / total) * newResults[index].qnt} ${type} de ${items[i].name}\\n`\r\n        }\r\n      }\r\n    }\r\n    setResults(newResults)\r\n  }, [items, total])\r\n\r\n  return (\r\n    <Grid container justify=\"center\" style={{ marginTop: '20px' }}>\r\n      <Grid item sm={6}>\r\n        <Typography variant=\"h5\" color=\"primary\">\r\n          Moradia UFF - Distribuição de alimentos ;)\r\n        </Typography>\r\n        <Typography color=\"primary\">Seja bem vindo!</Typography>\r\n        <br />\r\n        <Typography>Qual o tipo de divisão de alimentos deseja fazer?</Typography>\r\n        <br />\r\n        <TextField\r\n          variant=\"outlined\"\r\n          select\r\n          label=\"Tipo de operação\"\r\n          value={type}\r\n          onChange={(e) => {\r\n            setType(e.target.value)\r\n            if (e.target.value === 'items') {\r\n              setTotal(0)\r\n            }\r\n            setItems([])\r\n            setItem({})\r\n            setResults([{}])\r\n          }}\r\n        >\r\n          <MenuItem value=\"kg\">Divisão por Kg</MenuItem>\r\n          <MenuItem value=\"items\">Divisão por items</MenuItem>\r\n        </TextField>\r\n        <br />\r\n        <br />\r\n        {items.length > 0 ? (\r\n          <div>\r\n            <List>\r\n              {items.map((el, index) => (\r\n                <ListItem key={index}>\r\n                  <ListItemText primary={el.name} secondary={`${el.qnt} ${type}`} />{' '}\r\n                  <ListItemSecondaryAction>\r\n                    <Button variant=\"outlined\" onClick={() => setItems(items.filter((el, i) => i !== index))}>\r\n                      Remover\r\n                    </Button>\r\n                  </ListItemSecondaryAction>\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </div>\r\n        ) : null}\r\n        <Typography>Certo, agora adicione os items que deseja dividir e suas respectivas quantidades:</Typography>\r\n        <br />\r\n        <Paper variant=\"outlined\" style={{ padding: '20px', paddingLeft: '0px' }}>\r\n          <TextField variant=\"outlined\" label=\"Nome do item\" type=\"text\" style={{ margin: '8px' }} value={item.name || ''} onChange={(e) => setItem({ ...item, name: e.target.value })} />\r\n          <TextField variant=\"outlined\" label=\"Quantidade\" type=\"number\" style={{ margin: '8px' }} value={item.qnt || ''} onChange={(e) => setItem({ ...item, qnt: e.target.value })} />\r\n          <br />\r\n          <Grid container justify=\"flex-end\">\r\n            <Button\r\n              variant=\"outlined\"\r\n              onClick={() => {\r\n                setItems([...items, item])\r\n                setItem({})\r\n              }}\r\n            >\r\n              Adicionar item\r\n            </Button>\r\n          </Grid>\r\n        </Paper>\r\n        <br />\r\n        {type === 'items' ? (\r\n          <div>\r\n            <Typography>Pra fazer as contas preciso saber tambem quantas pessoas moram atualmente na moradia(total). Quantas sao?</Typography>\r\n            <br />\r\n            <TextField variant=\"outlined\" label=\"Quantidade de moradores\" type=\"Number\" value={total} onChange={(e) => setTotal(Number(e.target.value))} />\r\n            <br />\r\n            <br />\r\n            <Typography>Agora, irei perguntar quantas pessoas moram em cada ala e te direi quantos {type} de cada devem ser enviados :)</Typography>\r\n          </div>\r\n        ) : (\r\n          <Typography>\r\n            Agora, irei perguntar quantos {type} irão para cada ala e te direi quantos {type} de cada devem ser enviados :)\r\n          </Typography>\r\n        )}\r\n\r\n        <br />\r\n        {results.map((el, index) => (\r\n          <Paper key={index} variant=\"outlined\" style={{ padding: '20px', paddingLeft: '0px', marginBottom: '10px' }}>\r\n            <Typography style={{ margin: '8px' }} color=\"primary\">\r\n              <b>Ala {index + 1}:</b>\r\n            </Typography>\r\n\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label={type === 'items' ? 'Quantidade de pessoas' : 'Quantidade em kg'}\r\n              type=\"Number\"\r\n              style={{ margin: '8px' }}\r\n              value={results[index].qnt || ''}\r\n              onChange={(e) => {\r\n                const newResults = [...results]\r\n                newResults[index].qnt = Number(e.target.value)\r\n                newResults[index].result = ''\r\n                for (let i = 0; i < items.length; i++) {\r\n                  newResults[index].result += `${(items[i].qnt / total) * newResults[index].qnt} ${type} de ${items[i].name}\\n`\r\n                }\r\n                setResults(newResults)\r\n              }}\r\n            />\r\n            <br />\r\n            {results[index].result ? (\r\n              <Typography style={{ margin: '8px' }}>\r\n                <b>Esta ala deve receber: {results[index].result}</b>\r\n              </Typography>\r\n            ) : null}\r\n          </Paper>\r\n        ))}\r\n        <br />\r\n        <Button variant=\"outlined\" onClick={() => setResults([...results, {}])}>\r\n          Adicionar ala\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n","import React from 'react'\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport Root from './components/Root'\nimport { Container, CssBaseline } from '@material-ui/core'\n\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    fontSize: 14,\n    fontWeightLight: 300,\n    fontWeightRegular: 400,\n    fontWeightMedium: 500,\n  },\n  palette: {\n    type: 'dark',\n  },\n})\n\nexport default function App(props) {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <Container maxWidth={'xl'}>\n        <CssBaseline />\n        <Root />\n      </Container>\n    </MuiThemeProvider>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}